// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package wide_alu_reg_pkg;

  // Param list
  parameter int OP_A = 8;
  parameter int OP_B = 8;
  parameter int RESULT = 16;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic [31:0] q;
  } wide_alu_reg2hw_op_a_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } wide_alu_reg2hw_op_b_mreg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } trigger;
    struct packed {
      logic        q;
      logic        qe;
    } clear_err;
  } wide_alu_reg2hw_ctrl1_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
      logic        qe;
    } opsel;
    struct packed {
      logic [7:0]  q;
      logic        qe;
    } delay;
  } wide_alu_reg2hw_ctrl2_reg_t;


  typedef struct packed {
    logic [31:0] d;
  } wide_alu_hw2reg_result_mreg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  d;
    } opsel;
    struct packed {
      logic [7:0]  d;
    } delay;
  } wide_alu_hw2reg_ctrl2_reg_t;

  typedef struct packed {
    logic [1:0]  d;
  } wide_alu_hw2reg_status_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    wide_alu_reg2hw_op_a_mreg_t [7:0] op_a; // [529:274]
    wide_alu_reg2hw_op_b_mreg_t [7:0] op_b; // [273:18]
    wide_alu_reg2hw_ctrl1_reg_t ctrl1; // [17:14]
    wide_alu_reg2hw_ctrl2_reg_t ctrl2; // [13:1]
  } wide_alu_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    wide_alu_hw2reg_result_mreg_t [15:0] result; // [525:14]
    wide_alu_hw2reg_ctrl2_reg_t ctrl2; // [13:1]
    wide_alu_hw2reg_status_reg_t status; // [0:1]
  } wide_alu_hw2reg_t;

  // Register Address
  parameter logic [7:0] WIDE_ALU_OP_A_0_OFFSET = 8'h 0;
  parameter logic [7:0] WIDE_ALU_OP_A_1_OFFSET = 8'h 4;
  parameter logic [7:0] WIDE_ALU_OP_A_2_OFFSET = 8'h 8;
  parameter logic [7:0] WIDE_ALU_OP_A_3_OFFSET = 8'h c;
  parameter logic [7:0] WIDE_ALU_OP_A_4_OFFSET = 8'h 10;
  parameter logic [7:0] WIDE_ALU_OP_A_5_OFFSET = 8'h 14;
  parameter logic [7:0] WIDE_ALU_OP_A_6_OFFSET = 8'h 18;
  parameter logic [7:0] WIDE_ALU_OP_A_7_OFFSET = 8'h 1c;
  parameter logic [7:0] WIDE_ALU_OP_B_0_OFFSET = 8'h 20;
  parameter logic [7:0] WIDE_ALU_OP_B_1_OFFSET = 8'h 24;
  parameter logic [7:0] WIDE_ALU_OP_B_2_OFFSET = 8'h 28;
  parameter logic [7:0] WIDE_ALU_OP_B_3_OFFSET = 8'h 2c;
  parameter logic [7:0] WIDE_ALU_OP_B_4_OFFSET = 8'h 30;
  parameter logic [7:0] WIDE_ALU_OP_B_5_OFFSET = 8'h 34;
  parameter logic [7:0] WIDE_ALU_OP_B_6_OFFSET = 8'h 38;
  parameter logic [7:0] WIDE_ALU_OP_B_7_OFFSET = 8'h 3c;
  parameter logic [7:0] WIDE_ALU_RESULT_0_OFFSET = 8'h 40;
  parameter logic [7:0] WIDE_ALU_RESULT_1_OFFSET = 8'h 44;
  parameter logic [7:0] WIDE_ALU_RESULT_2_OFFSET = 8'h 48;
  parameter logic [7:0] WIDE_ALU_RESULT_3_OFFSET = 8'h 4c;
  parameter logic [7:0] WIDE_ALU_RESULT_4_OFFSET = 8'h 50;
  parameter logic [7:0] WIDE_ALU_RESULT_5_OFFSET = 8'h 54;
  parameter logic [7:0] WIDE_ALU_RESULT_6_OFFSET = 8'h 58;
  parameter logic [7:0] WIDE_ALU_RESULT_7_OFFSET = 8'h 5c;
  parameter logic [7:0] WIDE_ALU_RESULT_8_OFFSET = 8'h 60;
  parameter logic [7:0] WIDE_ALU_RESULT_9_OFFSET = 8'h 64;
  parameter logic [7:0] WIDE_ALU_RESULT_10_OFFSET = 8'h 68;
  parameter logic [7:0] WIDE_ALU_RESULT_11_OFFSET = 8'h 6c;
  parameter logic [7:0] WIDE_ALU_RESULT_12_OFFSET = 8'h 70;
  parameter logic [7:0] WIDE_ALU_RESULT_13_OFFSET = 8'h 74;
  parameter logic [7:0] WIDE_ALU_RESULT_14_OFFSET = 8'h 78;
  parameter logic [7:0] WIDE_ALU_RESULT_15_OFFSET = 8'h 7c;
  parameter logic [7:0] WIDE_ALU_CTRL1_OFFSET = 8'h 80;
  parameter logic [7:0] WIDE_ALU_CTRL2_OFFSET = 8'h 84;
  parameter logic [7:0] WIDE_ALU_STATUS_OFFSET = 8'h 88;


  // Register Index
  typedef enum int {
    WIDE_ALU_OP_A_0,
    WIDE_ALU_OP_A_1,
    WIDE_ALU_OP_A_2,
    WIDE_ALU_OP_A_3,
    WIDE_ALU_OP_A_4,
    WIDE_ALU_OP_A_5,
    WIDE_ALU_OP_A_6,
    WIDE_ALU_OP_A_7,
    WIDE_ALU_OP_B_0,
    WIDE_ALU_OP_B_1,
    WIDE_ALU_OP_B_2,
    WIDE_ALU_OP_B_3,
    WIDE_ALU_OP_B_4,
    WIDE_ALU_OP_B_5,
    WIDE_ALU_OP_B_6,
    WIDE_ALU_OP_B_7,
    WIDE_ALU_RESULT_0,
    WIDE_ALU_RESULT_1,
    WIDE_ALU_RESULT_2,
    WIDE_ALU_RESULT_3,
    WIDE_ALU_RESULT_4,
    WIDE_ALU_RESULT_5,
    WIDE_ALU_RESULT_6,
    WIDE_ALU_RESULT_7,
    WIDE_ALU_RESULT_8,
    WIDE_ALU_RESULT_9,
    WIDE_ALU_RESULT_10,
    WIDE_ALU_RESULT_11,
    WIDE_ALU_RESULT_12,
    WIDE_ALU_RESULT_13,
    WIDE_ALU_RESULT_14,
    WIDE_ALU_RESULT_15,
    WIDE_ALU_CTRL1,
    WIDE_ALU_CTRL2,
    WIDE_ALU_STATUS
  } wide_alu_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] WIDE_ALU_PERMIT [35] = '{
    4'b 1111, // index[ 0] WIDE_ALU_OP_A_0
    4'b 1111, // index[ 1] WIDE_ALU_OP_A_1
    4'b 1111, // index[ 2] WIDE_ALU_OP_A_2
    4'b 1111, // index[ 3] WIDE_ALU_OP_A_3
    4'b 1111, // index[ 4] WIDE_ALU_OP_A_4
    4'b 1111, // index[ 5] WIDE_ALU_OP_A_5
    4'b 1111, // index[ 6] WIDE_ALU_OP_A_6
    4'b 1111, // index[ 7] WIDE_ALU_OP_A_7
    4'b 1111, // index[ 8] WIDE_ALU_OP_B_0
    4'b 1111, // index[ 9] WIDE_ALU_OP_B_1
    4'b 1111, // index[10] WIDE_ALU_OP_B_2
    4'b 1111, // index[11] WIDE_ALU_OP_B_3
    4'b 1111, // index[12] WIDE_ALU_OP_B_4
    4'b 1111, // index[13] WIDE_ALU_OP_B_5
    4'b 1111, // index[14] WIDE_ALU_OP_B_6
    4'b 1111, // index[15] WIDE_ALU_OP_B_7
    4'b 1111, // index[16] WIDE_ALU_RESULT_0
    4'b 1111, // index[17] WIDE_ALU_RESULT_1
    4'b 1111, // index[18] WIDE_ALU_RESULT_2
    4'b 1111, // index[19] WIDE_ALU_RESULT_3
    4'b 1111, // index[20] WIDE_ALU_RESULT_4
    4'b 1111, // index[21] WIDE_ALU_RESULT_5
    4'b 1111, // index[22] WIDE_ALU_RESULT_6
    4'b 1111, // index[23] WIDE_ALU_RESULT_7
    4'b 1111, // index[24] WIDE_ALU_RESULT_8
    4'b 1111, // index[25] WIDE_ALU_RESULT_9
    4'b 1111, // index[26] WIDE_ALU_RESULT_10
    4'b 1111, // index[27] WIDE_ALU_RESULT_11
    4'b 1111, // index[28] WIDE_ALU_RESULT_12
    4'b 1111, // index[29] WIDE_ALU_RESULT_13
    4'b 1111, // index[30] WIDE_ALU_RESULT_14
    4'b 1111, // index[31] WIDE_ALU_RESULT_15
    4'b 0001, // index[32] WIDE_ALU_CTRL1
    4'b 0111, // index[33] WIDE_ALU_CTRL2
    4'b 0001  // index[34] WIDE_ALU_STATUS
  };
endpackage

